@using Newtonsoft.Json
@model IEnumerable<NewsManagement.ViewModels.Common.StatisticNews>

@{
	ViewData["Title"] = "Index";
	Layout = "~/Views/Shared/_Layout.cshtml";
	int i = 1;
}

@section Header{
<ol class="breadcrumb bg-transparent mb-0 pb-0 pt-1 px-0 me-sm-6 me-5">
	<li class="breadcrumb-item text-sm">
		<a class="opacity-3 text-dark" href="javascript:;">
			<svg width="12px" height="12px" class="mb-1" viewBox="0 0 45 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
				<title>Bác Sĩ </title>
				<g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
					<g transform="translate(-1716.000000, -439.000000)" fill="#252f40" fill-rule="nonzero">
						<g transform="translate(1716.000000, 291.000000)">
							<g transform="translate(0.000000, 148.000000)">
								<path d="M46.7199583,10.7414583 L40.8449583,0.949791667 C40.4909749,0.360605034 39.8540131,0 39.1666667,0 L7.83333333,0 C7.1459869,0 6.50902508,0.360605034 6.15504167,0.949791667 L0.280041667,10.7414583 C0.0969176761,11.0460037 -1.23209662e-05,11.3946378 -1.23209662e-05,11.75 C-0.00758042603,16.0663731 3.48367543,19.5725301 7.80004167,19.5833333 L7.81570833,19.5833333 C9.75003686,19.5882688 11.6168794,18.8726691 13.0522917,17.5760417 C16.0171492,20.2556967 20.5292675,20.2556967 23.494125,17.5760417 C26.4604562,20.2616016 30.9794188,20.2616016 33.94575,17.5760417 C36.2421905,19.6477597 39.5441143,20.1708521 42.3684437,18.9103691 C45.1927731,17.649886 47.0084685,14.8428276 47.0000295,11.75 C47.0000295,11.3946378 46.9030823,11.0460037 46.7199583,10.7414583 Z"></path>
								<path d="M39.198,22.4912623 C37.3776246,22.4928106 35.5817531,22.0149171 33.951625,21.0951667 L33.92225,21.1107282 C31.1430221,22.6838032 27.9255001,22.9318916 24.9844167,21.7998837 C24.4750389,21.605469 23.9777983,21.3722567 23.4960833,21.1018359 L23.4745417,21.1129513 C20.6961809,22.6871153 17.4786145,22.9344611 14.5386667,21.7998837 C14.029926,21.6054643 13.533337,21.3722507 13.0522917,21.1018359 C11.4250962,22.0190609 9.63246555,22.4947009 7.81570833,22.4912623 C7.16510551,22.4842162 6.51607673,22.4173045 5.875,22.2911849 L5.875,44.7220845 C5.875,45.9498589 6.7517757,46.9451667 7.83333333,46.9451667 L19.5833333,46.9451667 L19.5833333,33.6066734 L27.4166667,33.6066734 L27.4166667,46.9451667 L39.1666667,46.9451667 C40.2482243,46.9451667 41.125,45.9498589 41.125,44.7220845 L41.125,22.2822926 C40.4887822,22.4116582 39.8442868,22.4815492 39.198,22.4912623 Z"></path>
							</g>
						</g>
					</g>
				</g>
			</svg>
		</a>
	</li>
	<li class="breadcrumb-item text-sm"><a class="opacity-5 text-dark" href="@Url.Action("Index", "City")">Quản lý thành phố</a></li>
	<li class="breadcrumb-item text-sm text-dark active" aria-current="page">Danh sách thành phố</li>
</ol>
<h6 class="font-weight-bolder mb-0">Danh sách thành phố hoạt động</h6>
}

<div class="container-fluid py-4">
	<div class="row mt-4">


		<div class="col-lg-12">
			<div class="card z-index-2">
				<div class="card-header pb-0">
					<div class="d-lg-flex">
						<div>
							<h5 class="mb-0">Tất cả thành phố</h5>
							<p class="text-sm">
								<i class="fa fa-arrow-up text-success" aria-hidden="true"></i>
								<span class="font-weight-bold">tăng thêm 4%</span> vào năm 2021
							</p>
						</div>
						<div class="col-7 ms-auto my-auto mt-lg-0">
							<div class="row">
										<div class="col-4">
											<select id="choices-day" class="form-control" asp-items="ViewBag.Day">
											</select>
										</div>
										<div class="col-4">
											<select id="choices-month" class="form-control" asp-items="ViewBag.Month">
											</select>
										</div>
										<div class="col-4">
											<select id="choices-year" class="form-control" asp-items="ViewBag.Year">
											</select>
										</div>
									</div>
						</div>
					</div>

				</div>
				<div class="card-body p-3">
					<div class="chart" id="chartget">
						<canvas id="chart-line" class="chart-canvas" height="375" width="832"
								style="display: block; box-sizing: border-box; height: 300px; width: 666.2px;">
						</canvas>
					</div>
				</div>
			</div>
		</div>
	</div>

	<div class="row mt-2">
		<div class="col-12">

			<div class="card">
				@*<div class="card-header pb-0">
					<div class="d-lg-flex">
					<div>
					<h5 class="mb-0">Tất cả thành phố</h5>
					<p class="text-sm mb-0">
					Thành phố nơi các nhà báo tin tức hoạt động.
					</p>
					</div>
					<div class="ms-auto my-auto mt-lg-0 mt-4">
					<div class="ms-auto my-auto">
					<a href="@Url.Action("CreateNews", "News", new { area = "Admin" })" class="btn bg-gradient-info btn-sm mb-0">+&nbsp; Thêm tin tức</a>

					</div>
					</div>
					</div>
					</div>*@
				<div class="card-body px-0 pb-0">
					<div class="table-responsive">
						<table class="table table-flush" id="products-list">
							<thead class="thead-light">
								<tr>
									<th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">STT</th>
									<th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">@Html.DisplayNameFor(model => model.date)</th>
									<th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">@Html.DisplayNameFor(model => model.count)</th>
									<th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">@Html.DisplayNameFor(model => model.view)</th>
									<th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">@Html.DisplayNameFor(model => model.rating)</th>

								</tr>
							</thead>
							<tbody>
								@foreach (var item in Model)
								{
									<tr>
										<td>
											<p class="text-xs font-weight-bold mb-0">@i</p>
										</td>
										<td>
											<div class="d-flex px-2">

												<div class="my-auto">
													<h6 class="mb-0 text-xs">@item.date</h6>
												</div>
											</div>
										</td>
										<td>
											<p class="text-xs font-weight-bold mb-0">@item.count</p>
										</td>
										<td>
											<span class="badge badge-dot me-4">

												<span class="text-dark text-xs">@item.view</span>
											</span>
										</td>
										<td class="align-middle text-center">
											<div class="d-flex align-items-center">
												<span class="me-2 text-xs">@item.rating</span>

											</div>
										</td>


									</tr>
									i++;
								}



							</tbody>
							<tfoot>
								<tr>
									<th>
										STT
									</th>
									<th>
										@Html.DisplayNameFor(model => model.date)
									</th>

									<th>
										@Html.DisplayNameFor(model => model.count)
									</th>
									<th>
										@Html.DisplayNameFor(model => model.view)
									</th>
									<th>
										@Html.DisplayNameFor(model => model.rating)
									</th>


								</tr>
							</tfoot>
						</table>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

@section jsFooter{
<script src="~/js/plugins/datatables.js"></script>
<script src="~/js/plugins/chartjs.min.js"></script>
<script>
        
		if (document.getElementById('choices-day')) {
            var element = document.getElementById('choices-day');
            const example = new Choices(element, {
                searchEnabled: true
            });
        };
        if (document.getElementById('choices-month')) {
            var element = document.getElementById('choices-month');
            const example = new Choices(element, {
                searchEnabled: false
            });
        };
        if (document.getElementById('choices-year')) {
            var element = document.getElementById('choices-year');
            const example = new Choices(element, {
                searchEnabled: true
            });
        };
    </script>
<script>
	if (document.getElementById('products-list')) {
		const dataTableSearch = new simpleDatatables.DataTable("#products-list", {
			searchable: true,
			fixedHeight: false,
			perPage: 7
		});

		document.querySelectorAll(".export").forEach(function (el) {
			el.addEventListener("click", function (e) {
				var type = el.dataset.type;

				var data = {
					type: type,
					filename: "soft-ui-" + type,
				};

				if (type === "csv") {
					data.columnDelimiter = "|";
				}

				dataTableSearch.export(data);
			});
		});
	};
</script>
<script>

	var dateindex = @Html.Raw(ViewBag.Statitic);
	UserGetMonth(dateindex);

		$("#choices-day").change(function () {
			var day = $(this).val();
			var month = $("#choices-month").val();
			var year = $("#choices-year").val();
			$.get('/Statistic/GetDay?day=' + day + '&month=' + month + '&year='+ year , function (resp) {
				UserGetMonth(resp);
			});
		});

		$("#choices-month").change(function () {
			var month = $(this).val();
			var year = $("#choices-year").val();
			$.get('/Statistic/GetMonth?month=' + month + '&year='+ year , function (resp) {
				UserGetMonth(resp);
			});
		});

		$("#choices-year").change(function () {
			var year = $(this).val();
			$.get('/Statistic/GetYear?year='+ year , function (resp) {
				UserGetMonth(resp);
			});
		});

	function UserGetMonth(resp) {

		$("canvas#chart-bars").remove();
		$("#chartget").html('<canvas id="chart-line" class="chart-canvas" height="375" width="832" style = "display: block; box-sizing: border-box; height: 300px; width: 666.2px;" > </canvas >')

		var label = [];
		var labelmonth = [];
		var datacount = [];
		var dataview = [];
		var datarating = [];

		$.each(resp, function (index, item) {
			label.push(item.date);
			labelmonth.push(item.month)
			datacount.push(item.count);
			dataview.push(item.view)
			datarating.push(item.rating)
		})

		console.log(label);
		console.log(labelmonth);
		console.log(datacount);
		console.log(dataview);
		console.log(datarating);

		var ctx2 = document.getElementById("chart-line").getContext("2d");

		var gradientStroke1 = ctx2.createLinearGradient(0, 230, 0, 50);

		gradientStroke1.addColorStop(1, 'rgba(203,12,159,0.2)');
		gradientStroke1.addColorStop(0.2, 'rgba(72,72,176,0.0)');
		gradientStroke1.addColorStop(0, 'rgba(203,12,159,0)'); //purple colors

		var gradientStroke2 = ctx2.createLinearGradient(0, 230, 0, 50);

		gradientStroke2.addColorStop(1, 'rgba(130,214,22,0.2)');
		gradientStroke2.addColorStop(0.2, 'rgba(72,72,176,0.0)');
		gradientStroke2.addColorStop(0, 'rgba(130,214,22,0)'); //purple colors

		var gradientStroke3 = ctx2.createLinearGradient(0, 230, 0, 50);

		gradientStroke3.addColorStop(1, 'rgba(39,197,231,0.2)');
		gradientStroke3.addColorStop(0.2, 'rgba(72,72,176,0.0)');
		gradientStroke3.addColorStop(0, 'rgba(39,197,231,0)'); //purple colors

		new Chart(ctx2, {
			type: "line",
			data: {
				labels: label,
				datasets: [{
					label: "News",
					tension: 0.4,
					borderWidth: 0,
					pointRadius: 1,
					pointBackgroundcolor: "#cb0c9f",
					borderColor: "#cb0c9f",
					borderWidth: 3,
					backgroundColor: gradientStroke1,
					fill: true,
					data: datacount,
					maxBarThickness: 6

				},
				{
					label: "View",
					tension: 0.4,
					borderWidth: 0,
					pointRadius: 1,
					pointBackgroundcolor: "#82d616",
					borderColor: "#82d616",
					borderWidth: 3,
					backgroundColor: gradientStroke2,
					fill: true,
					data: dataview,
					maxBarThickness: 6
					},
				{
					label: "Rating",
					tension: 0.4,
					borderWidth: 0,
					pointRadius: 1,
					pointBackgroundcolor: "#17c1e8",
					borderColor: "#17c1e8",
					borderWidth: 3,
					backgroundColor: gradientStroke3,
					fill: true,
					data: datarating,
					maxBarThickness: 6
				},
				],
			},
			options: {
				responsive: true,
				maintainAspectRatio: false,
				plugins: {
					legend: {
						display: false,
					}
				},
				interaction: {
					intersect: false,
					mode: 'index',
				},
				scales: {
					y: {
						grid: {
							drawBorder: false,
							display: true,
							drawOnChartArea: true,
							drawTicks: false,
							borderDash: [5, 5]
						},
						ticks: {
							display: true,
							padding: 10,
							color: '#b2b9bf',
							font: {
								size: 11,
								family: "Open Sans",
								style: 'normal',
								lineHeight: 2
							},
						}
					},
					x: {
						grid: {
							drawBorder: false,
							display: false,
							drawOnChartArea: false,
							drawTicks: false,
							borderDash: [5, 5]
						},
						ticks: {
							display: true,
							color: '#b2b9bf',
							padding: 20,
							font: {
								size: 11,
								family: "Open Sans",
								style: 'normal',
								lineHeight: 2
							},
						}
					},
				},
			},
		});
	}







	(function () {
		const container = document.getElementById("globe");
		const canvas = container.getElementsByTagName("canvas")[0];

		const globeRadius = 100;
		const globeWidth = 4098 / 2;
		const globeHeight = 1968 / 2;

		function convertFlatCoordsToSphereCoords(x, y) {
			let latitude = ((x - globeWidth) / globeWidth) * -180;
			let longitude = ((y - globeHeight) / globeHeight) * -90;
			latitude = (latitude * Math.PI) / 180;
			longitude = (longitude * Math.PI) / 180;
			const radius = Math.cos(longitude) * globeRadius;

			return {
				x: Math.cos(latitude) * radius,
				y: Math.sin(longitude) * globeRadius,
				z: Math.sin(latitude) * radius
			};
		}

		function makeMagic(points) {
			const {
				width,
				height
			} = container.getBoundingClientRect();

			// 1. Setup scene
			const scene = new THREE.Scene();
			// 2. Setup camera
			const camera = new THREE.PerspectiveCamera(45, width / height);
			// 3. Setup renderer
			const renderer = new THREE.WebGLRenderer({
				canvas,
				antialias: true
			});
			renderer.setSize(width, height);
			// 4. Add points to canvas
			// - Single geometry to contain all points.
			const mergedGeometry = new THREE.Geometry();
			// - Material that the dots will be made of.
			const pointGeometry = new THREE.SphereGeometry(0.5, 1, 1);
			const pointMaterial = new THREE.MeshBasicMaterial({
				color: "#989db5",
			});

			for (let point of points) {
				const {
					x,
					y,
					z
				} = convertFlatCoordsToSphereCoords(
					point.x,
					point.y,
					width,
					height
				);

				if (x && y && z) {
					pointGeometry.translate(x, y, z);
					mergedGeometry.merge(pointGeometry);
					pointGeometry.translate(-x, -y, -z);
				}
			}

			const globeShape = new THREE.Mesh(mergedGeometry, pointMaterial);
			scene.add(globeShape);

			container.classList.add("peekaboo");

			// Setup orbital controls
			camera.orbitControls = new THREE.OrbitControls(camera, canvas);
			camera.orbitControls.enableKeys = false;
			camera.orbitControls.enablePan = false;
			camera.orbitControls.enableZoom = false;
			camera.orbitControls.enableDamping = false;
			camera.orbitControls.enableRotate = true;
			camera.orbitControls.autoRotate = true;
			camera.position.z = -265;

			function animate() {
				// orbitControls.autoRotate is enabled so orbitControls.update
				// must be called inside animation loop.
				camera.orbitControls.update();
				requestAnimationFrame(animate);
				renderer.render(scene, camera);
			}
			animate();
		}

		function hasWebGL() {
			const gl =
				canvas.getContext("webgl") || canvas.getContext("experimental-webgl");
			if (gl && gl instanceof WebGLRenderingContext) {
				return true;
			} else {
				return false;
			}
		}

		function init() {
			if (hasWebGL()) {
				window
				window.fetch("https://raw.githubusercontent.com/creativetimofficial/public-assets/master/soft-ui-dashboard-pro/assets/js/points.json")
					.then(response => response.json())
					.then(data => {
						makeMagic(data.points);
					});
			}
		}
		init();
	})();
</script>
}